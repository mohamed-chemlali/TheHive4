#!/bin/bash
CQL_HOSTNAMES=${TH_CQL_HOSTNAMES:-cassandra}
BDB_DIRECTORY=${TH_BDB_DIRECTORY:-/data/db}
HDFS_URL=${TH_HDFS_URL}
STORAGE_DIRECTORY=${TH_STORAGE_DIRECTORY:-/data/files}
test "${TH_NO_CONFIG_SECRET}" == 1
CONFIG_SECRET=$?
SECRET=${TH_SECRET}
SHOW_SECRET=${TH_SHOW_SECRET:-0}
test "${TH_NO_CONFIG_DB}" == 1
CONFIG_DB=$?
test "${TH_NO_CONFIG_STORAGE}" == 1
CONFIG_STORAGE=$?
test "${TH_NO_CONFIG_CORTEX}" == 1
CONFIG_CORTEX=$?
CORTEX_HOSTNAMES=${TH_CORTEX_HOSTNAMES:-cortex}
CORTEX_PROTO=${TH_CORTEX_PROTO:-http}
CORTEX_PORT=${TH_CORTEX_PORT:-9001}
test "${TH_NO_CONFIG}" == 1
CONFIG=$?
CONFIG_FILE=${TH_CONFIG_FILE:-/etc/thehive/application.conf}
CORTEX_KEYS=${TH_CORTEX_KEYS}
CONFIG_MISP=0
MISP_HOSTNAMES="misp"
MISP_PROTO="http"
MISP_PORT="80"
function usage {
  cat <<- _EOF_
    Available options:
    --config-file <file>                        | configuration file path
    --no-config                                 | do not try to configure TheHive (add secret and elasticsearch)
    --no-config-secret                          | do not add random secret to configuration
    --secret <secret>                           | secret to secure sessions
    --show-secret                               | show the generated secret
    --no-config-db                              | do not configure database automatically
    --cql-hostnames <host>,<host>,...           | resolve these hostnames to find cassandra instances
    --cql-username <username>                   | username of cassandra database
    --cql-password <password>                   | password of cassandra database
    --bdb-directory <path>                      | location of local database, if cassandra is not used (default: /data/db)
    --no-config-storage                         | do not configure storage automatically
    --hdfs-url <url>                            | url of hdfs name node
    --storage-directory <path>                  | location of local storage, if hdfs is not used (default: /data/files)
    --no-config-cortex                          | do not add Cortex configuration
    --cortex-proto <proto>                      | define protocol to connect to Cortex (default: http)
    --cortex-port <port>                        | define port to connect to Cortex (default: 9001)
    --cortex-hostname <host>,<host>,...         | resolve this hostname to find Cortex instances
    --cortex-keys <key>,<key>,...               | define Cortex key
    --config-misp                               | Enable adding MISP configuration
    --misp-hostnames <host>,<host>, ...         | Resolve this hostname to find MISP instances (default: misp)
    --misp-proto <proto>                        | Define protocol to connect to MISP (default: http)
    --misp-port <port>                          | Define port to connect to MISP ( default: 80)
    --misp-keys <key>,<key>, ...                | Define MISP key
    --misp-template <template-name>             | Name of the case template in TheHive that shall be used to import MISP events as cases by default (Optional)
    --misp-tags <tag>,<tag>, ...                | Optional tags to add to each observable  imported  from  an  event (Optional)
    --misp-max-age <number>                     | Maximum age of the last publish date of event to be imported in TheHive in days (Optional)
    --misp-exc-orgs <org>,<org>, ...            | List of MISP organisation from which event will not be imported (Optional)
    --misp-exc-tags <tag>,<tag>, ...            | Don't import MISP events which have one of these tags (Optional)
    --misp-wh-tags <tag>,<tag>, ...             | Import only MISP events which have one of these tags (Optional)
_EOF_
  exit 1
}


STOP=0
while test $# -gt 0 -o "${STOP}" = 1
do
  case "$1" in
    "--config-file")       shift;CONFIG_FILE=$1 ;;
    "--no-config")         CONFIG=0 ;;
    "--no-config-secret")  CONFIG_SECRET=0 ;;
    "--secret")            shift; SECRET=$1 ;;
    "--show-secret")       SHOW_SECRET=1 ;;
    "--no-config-db")      CONFIG_DB=0 ;;
    "--cql-hostnames")     shift; CQL_HOSTNAMES=$1 ;;
    "--cql-username")      shift; CQL_USERNAME=$1 ;;
    "--cql-password")      shift; CQL_PASSWORD=$1 ;;
    "--bdb-directory")     shift; BDB_DIRECTORY=$1 ;;
    "--no-config-storage") CONFIG_STORAGE=0 ;;
    "--hdfs-url")          shift; HDFS_URL=$1 ;;
    "--storage-directory") shift; STORAGE_DIRECTORY=$1 ;;
    "--no-config-cortex")  CONFIG_CORTEX=0 ;;
    "--cortex-proto")      shift; CORTEX_PROTO=$1 ;;
    "--cortex-port")       shift; CORTEX_PORT=$1 ;;
    "--cortex-hostnames")  shift; CORTEX_HOSTNAMES=$1 ;;
    "--cortex-keys")       shift; CORTEX_KEYS=$1 ;;
    "--config-misp")       CONFIG_MISP=1 ;;
    "--misp-hostnames")    shift; MISP_HOSTNAMES=$1 ;;
    "--misp-proto")        shift; MISP_PROTO=$1 ;;
    "--misp-port")         shift; MISP_PORT=$1 ;;
    "--misp-keys")         shift; MISP_KEYS=$1 ;;
    "--misp-template")     shift; MISP_TEMPLATE=$1 ;;
    "--misp-tags")         shift; MISP_TAGS=$1 ;;
    "--misp-max-age")      shift; MISP_AGE=$1 ;; 
    "--misp-exc-orgs")     shift; MISP_EXC_ORG=$1 ;;
    "--misp-exc-tags")     shift; MISP_EXC_TAGS=$1 ;;
    "--misp-wh-tags")      shift; MISP_WH_TAGS=$1 ;;
    "--")                  STOP=1;;
    *)                     usage
  esac
  shift
done

if test "${CONFIG}" = 1
then
  echo "Waiting until Cassandra DB is up"
  sleep 30   # Sleep until cassandra Db is up 
  CONFIG_FILE=$(mktemp).conf
  if test "${CONFIG_SECRET}" = 1
  then
    if test -z "${SECRET}"
    then
      SECRET=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1)
      test "${SHOW_SECRET}" = 1 && echo Using secret: ${SECRET}
    fi
    echo "play.http.secret.key = \"${SECRET}\"" >> ${CONFIG_FILE}
  fi

  if test "${CONFIG_DB}" = 1
  then
    IFS=',' read -r -a CQL_HOSTS <<< "${CQL_HOSTNAMES}"
    declare -a CQL
    for C in "${CQL_HOSTS[@]}"
    do
        CQL+=($(getent ahostsv4 "$C" | awk '{ print $1 }' | sort -u))
    done
    echo "db.janusgraph {" >> ${CONFIG_FILE}
    if test "${#CQL[@]}" = 0
    then
      echo "Local database in ${BDB_DIRECTORY} is be used"
      mkdir -p "${BDB_DIRECTORY}"
      echo "storage.backend = berkeleyje"             >> ${CONFIG_FILE}
      echo "storage.directory = \"${BDB_DIRECTORY}\"" >> ${CONFIG_FILE}
      echo "berkeleyje.freeDisk = 1"                  >> ${CONFIG_FILE}
    else
      echo "Using cassanra address = ${CQL[@]}"
      echo "storage.backend = cql"            >> ${CONFIG_FILE}
      if [[ -n $CQL_USERNAME && -n $CQL_PASSWORD ]];then
           echo "storage.username = \"${CQL_USERNAME}\"" >> ${CONFIG_FILE}
           echo "storage.password = \"${CQL_PASSWORD}\"" >> ${CONFIG_FILE}
           printf "Using ${CQL_USERNAME} as cassandra username and ${CQL_PASSWORD} as its password\n"
      fi
      echo "storage.cql.cluster-name = thp"   >> ${CONFIG_FILE}
      echo "storage.cql.keyspace = thehive"   >> ${CONFIG_FILE}
      echo "storage.hostname = ["             >> ${CONFIG_FILE}
      printf '%s\n' "${CQL_HOSTS[@]}"         >> ${CONFIG_FILE}
      echo "]"                                >> ${CONFIG_FILE}
    fi
    echo "}" >> ${CONFIG_FILE}
  fi

  if test "${CONFIG_STORAGE}" = 1
  then
    echo "storage {" >> ${CONFIG_FILE}
    if test -n "${HDFS_URL}"
    then
      echo "Using HDFS ${HDFS_URL}"
      echo "provider: hdfs"        >> ${CONFIG_FILE}
      echo "hdfs {"                >> ${CONFIG_FILE}
      echo "root: \"${HDFS_URL}\"" >> ${CONFIG_FILE}
      echo "location: "/thehive""  >> ${CONFIG_FILE}
      echo "username: thehive"     >> ${CONFIG_FILE}
      echo "}"                     >> ${CONFIG_FILE}
    else
      echo "Using local storage in ${STORAGE_DIRECTORY}"
      mkdir -p "${STORAGE_DIRECTORY}"
      echo "provider: localfs"                           >> ${CONFIG_FILE}
      echo "localfs.directory: \"${STORAGE_DIRECTORY}\"" >> ${CONFIG_FILE}
    fi
    echo "}" >> ${CONFIG_FILE}
  fi

  if test "${CONFIG_CORTEX}" = 1
  then
    declare -a CORTEX_URLS
    IFS=',' read -r -a CH <<< "${CORTEX_HOSTNAMES}"
    IFS=',' read -r -a CK <<< "${CORTEX_KEYS}"
    for C in "${CH[@]}"
    do
      test -n "${C}" && CORTEX_URLS+=("${CORTEX_PROTO}://${C}:${CORTEX_PORT}")
    done
    if test ${#CORTEX_URLS[@]} -gt 0
    then
      echo "play.modules.enabled += org.thp.thehive.connector.cortex.CortexModule" >> ${CONFIG_FILE}
      echo "cortex.servers = [" >> ${CONFIG_FILE}
      I=0
      for C in ${CORTEX_URLS[@]}
      do
        echo "Add Cortex cortex${I}: ${C}"
        echo "{"                   >> ${CONFIG_FILE}
        echo "name = cortex${I}"   >> ${CONFIG_FILE}
        echo "url = \"$C\""        >> ${CONFIG_FILE}
        echo auth {                >> ${CONFIG_FILE}
        echo "type = \"bearer\""   >> ${CONFIG_FILE}
        echo "key = \"${CK[$I]}\"" >> ${CONFIG_FILE}
        echo "}"                   >> ${CONFIG_FILE}
        echo "}"                   >> ${CONFIG_FILE}
        I=$((${I}+1))
      done
      echo "]"  >> ${CONFIG_FILE}
    fi
  fi

if [[ $CONFIG_MISP -eq 1 ]];then
  declare -a MISP_URLS
  IFS=',' read -r -a MH <<< "${MISP_HOSTNAMES}"
  IFS=',' read -r -a MK <<< "${MISP_KEYS}"
  for M in "${MH[@]}";do
    test -n "${M}" && MISP_URLS+=("${MISP_PROTO}://${M}:${MISP_PORT}")
  done
  if [[ ${#MISP_URLS[@]} -gt 0 ]];then
  echo "play.modules.enabled += org.thp.thehive.connector.misp.MispModule" >> ${CONFIG_FILE}
  echo "misp.interval = 1 hour" >> ${CONFIG_FILE}
  echo "misp.servers = [">> ${CONFIG_FILE}
  i=0
  for M in ${MISP_URLS[@]};do
    echo "Add MISP n${i} : ${M}"
    echo "{" >> ${CONFIG_FILE}
    echo "name = \"MISP${i}\"" >> ${CONFIG_FILE}
    echo "url = \"${M}\"" >> ${CONFIG_FILE}
    echo "auth {" >> ${CONFIG_FILE}
    echo "type = key" >> ${CONFIG_FILE}
    echo "key = \"${MK[$i]}\"" >> ${CONFIG_FILE}
    echo "}" >> ${CONFIG_FILE}
    echo "wsConfig {}" >> ${CONFIG_FILE}

# Optional Config #
  # MISP Template #
  if [[ -n $MISP_TEMPLATE ]];then
    echo "caseTemplate = \"${MISP_TEMPLATE}\"" >> ${CONFIG_FILE}
  fi
  # MISP Tags #
  IFS=',' read -r -a MT <<< ${MISP_TAGS}
  if [[ ${#MT[@]} -gt 0 ]];then
    for tag in ${MT[@]};do
	tags="${tags}\"${tag}\","
    done
	echo "tags = [${tags:0:$((${#tags}-1))}]" >> ${CONFIG_FILE}
  fi

  # MISP Max-Age #
  if [[ -n $MISP_AGE ]];then
    echo "max-age = ${MISP_AGE} days" >> ${CONFIG_FILE}
  fi

  # MISP Exclusion #
  IFS=',' read -r -a MEO <<< ${MISP_EXC_ORG}
  if [[ ${#MEO[@]} -gt 0 ]];then
    for org in ${MEO[@]};do
      orgs="${orgs}\"${org}\","
    done
    echo "exclusion.organisation = [${orgs:0:$((${#orgs}-1))}]" >> ${CONFIG_FILE}
  fi
  IFS=',' read -r -a MET <<< ${MISP_EXC_TAGS}  
  if [[ ${#MET[@]} -gt 0 ]];then
    for tag in ${MET[@]};do
      etags="${etags}\"${tag}\","
    done
    echo "exclusion.tags = [${etags:0:$((${#etags}-1))}]" >> ${CONFIG_FILE}
  fi
  # MISP Whitelist #
  IFS=',' read -r -a MWT <<< ${MISP_WH_TAGS}
  if [[ ${#MWT[@]} -gt 0 ]];then
    for tag in ${MWT[@]};do
      wtags="${wtags}\"${tag}\","
    done
    echo "whitelist.tags = [${wtags:0:$((${#wtags}-1))}]" >> ${CONFIG_FILE}
  fi
  echo "}" >> ${CONFIG_FILE}
  i=$((${i}+1))
  done
  echo "]" >> ${CONFIG_FILE}
  fi
fi

  echo "include file(\"secret.conf\")" >> ${CONFIG_FILE}
fi

bin/thehive \
  -Dconfig.file=${CONFIG_FILE} \
  -Dlogger.file=/etc/thehive/logback.xml \
  -Dpidfile.path=/dev/null \
  $@
PID=$!
trap 'kill -SIGTERM "${PID}"; wait "${PID}"; exit 143' SIGTERM SIGINT
wait ${PID}
